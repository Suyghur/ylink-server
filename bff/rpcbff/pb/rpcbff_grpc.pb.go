// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/rpcbff.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcbffClient is the client API for Rpcbff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcbffClient interface {
	ReceiverChatMsg(ctx context.Context, in *ChatMsgReq, opts ...grpc.CallOption) (Rpcbff_ReceiverChatMsgClient, error)
}

type rpcbffClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcbffClient(cc grpc.ClientConnInterface) RpcbffClient {
	return &rpcbffClient{cc}
}

func (c *rpcbffClient) ReceiverChatMsg(ctx context.Context, in *ChatMsgReq, opts ...grpc.CallOption) (Rpcbff_ReceiverChatMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rpcbff_ServiceDesc.Streams[0], "/pb.rpcbff/receiverChatMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcbffReceiverChatMsgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rpcbff_ReceiverChatMsgClient interface {
	Recv() (*ChatMsgReqResp, error)
	grpc.ClientStream
}

type rpcbffReceiverChatMsgClient struct {
	grpc.ClientStream
}

func (x *rpcbffReceiverChatMsgClient) Recv() (*ChatMsgReqResp, error) {
	m := new(ChatMsgReqResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RpcbffServer is the server API for Rpcbff service.
// All implementations must embed UnimplementedRpcbffServer
// for forward compatibility
type RpcbffServer interface {
	ReceiverChatMsg(*ChatMsgReq, Rpcbff_ReceiverChatMsgServer) error
	mustEmbedUnimplementedRpcbffServer()
}

// UnimplementedRpcbffServer must be embedded to have forward compatible implementations.
type UnimplementedRpcbffServer struct {
}

func (UnimplementedRpcbffServer) ReceiverChatMsg(*ChatMsgReq, Rpcbff_ReceiverChatMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiverChatMsg not implemented")
}
func (UnimplementedRpcbffServer) mustEmbedUnimplementedRpcbffServer() {}

// UnsafeRpcbffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcbffServer will
// result in compilation errors.
type UnsafeRpcbffServer interface {
	mustEmbedUnimplementedRpcbffServer()
}

func RegisterRpcbffServer(s grpc.ServiceRegistrar, srv RpcbffServer) {
	s.RegisterService(&Rpcbff_ServiceDesc, srv)
}

func _Rpcbff_ReceiverChatMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMsgReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RpcbffServer).ReceiverChatMsg(m, &rpcbffReceiverChatMsgServer{stream})
}

type Rpcbff_ReceiverChatMsgServer interface {
	Send(*ChatMsgReqResp) error
	grpc.ServerStream
}

type rpcbffReceiverChatMsgServer struct {
	grpc.ServerStream
}

func (x *rpcbffReceiverChatMsgServer) Send(m *ChatMsgReqResp) error {
	return x.ServerStream.SendMsg(m)
}

// Rpcbff_ServiceDesc is the grpc.ServiceDesc for Rpcbff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rpcbff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.rpcbff",
	HandlerType: (*RpcbffServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "receiverChatMsg",
			Handler:       _Rpcbff_ReceiverChatMsg_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/rpcbff.proto",
}
