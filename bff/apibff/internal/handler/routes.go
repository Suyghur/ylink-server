// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	cscmd "ylink/bff/apibff/internal/handler/cs/cmd"
	playercmd "ylink/bff/apibff/internal/handler/player/cmd"
	"ylink/bff/apibff/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Player2Ctx},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/player/fetch-cs-info",
					Handler: playercmd.PlayerFetchCsInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/player/fetch-history-msg",
					Handler: playercmd.PlayerFetchHistoryMsgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/player/fetch-msg",
					Handler: playercmd.PlayerFetchMsgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/player/send-msg",
					Handler: playercmd.PlayerSendMsgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/player/disconnect",
					Handler: playercmd.PlayerDisconnectHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/cs/fetch-player-queue",
				Handler: cscmd.CsFetchPlayerQueueHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cs/connect-player",
				Handler: cscmd.CsConnectPlayerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cs/fetch-history-list",
				Handler: cscmd.CsFetchHistoryListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cs/fetch-history-msg",
				Handler: cscmd.CsFetchHistoryMsgHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cs/fetch-msg",
				Handler: cscmd.CsFetchMsgHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cs/send-msg",
				Handler: cscmd.CsSendMsgHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)
}
