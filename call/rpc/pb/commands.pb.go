// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: commands.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 状态命令枚举
type ECommand int32

const (
	ECommand_SEND_MSG       ECommand = 0 // 消息信息
	ECommand_MSG_HEART_BEAT ECommand = 3 // 心跳
	// status
	ECommand_ON_PLAYER_DISCONNECT      ECommand = 1004 // 玩家断开连接  cmd_str:玩家id cmd_val:登出原因ErrorReason
	ECommand_ON_PLAYER_CONNECT         ECommand = 1005 // 玩家连接     cmd_str:玩家id
	ECommand_ON_PLAYER_WAIT_QUEUE_INFO ECommand = 1006 // 玩家等待队列信息 消息体：CommandMsg.buff.array_id_info
	ECommand_ON_PLAYER_RECEIVE_REPLY   ECommand = 1007 // 玩家被应答 cmd_str:客服id
	ECommand_ON_PLAYER_WAIT_QUEUE_LEN  ECommand = 1008 // 玩家等待队列长度 cmd_val: 队列人数
	ECommand_ON_SERVICE_DISCONNECT     ECommand = 3002 // 客服断开连接   cmd_str:客服id
	ECommand_ON_SERVICE_CONNECT        ECommand = 3003 // 客服连接     cmd_str:客服id
	ECommand_ON_SERVICE_HANG_UP_LIST   ECommand = 3004 // 客服-玩家挂断列表   消息体：CommandMsg.buff.array_id_info
	// 请求操作
	ECommand_CALL_PLAYER_MSG      ECommand = 2001 // 玩家->服务端 发送消息
	ECommand_CALL_SERVICE_MSG     ECommand = 2002 // 客服->服务端 发送消息
	ECommand_CALL_PLAYER_LOGOUT   ECommand = 2003 // 玩家登出
	ECommand_CALL_SERVICE_LOGOUT  ECommand = 2004 // 客服登出
	ECommand_CALL_SERVICE_REPLY   ECommand = 2005 // 客服应答 cmd_str:待应答的玩家id
	ECommand_CALL_PLAYER_CHAT_LOG ECommand = 2006 // 获取玩家聊天记录 cmd_str:玩家id    返回:CommandMsg.buff.array_chat_log
	// gm debug
	ECommand_MSG_TEST ECommand = 100001
)

// Enum value maps for ECommand.
var (
	ECommand_name = map[int32]string{
		0:      "SEND_MSG",
		3:      "MSG_HEART_BEAT",
		1004:   "ON_PLAYER_DISCONNECT",
		1005:   "ON_PLAYER_CONNECT",
		1006:   "ON_PLAYER_WAIT_QUEUE_INFO",
		1007:   "ON_PLAYER_RECEIVE_REPLY",
		1008:   "ON_PLAYER_WAIT_QUEUE_LEN",
		3002:   "ON_SERVICE_DISCONNECT",
		3003:   "ON_SERVICE_CONNECT",
		3004:   "ON_SERVICE_HANG_UP_LIST",
		2001:   "CALL_PLAYER_MSG",
		2002:   "CALL_SERVICE_MSG",
		2003:   "CALL_PLAYER_LOGOUT",
		2004:   "CALL_SERVICE_LOGOUT",
		2005:   "CALL_SERVICE_REPLY",
		2006:   "CALL_PLAYER_CHAT_LOG",
		100001: "MSG_TEST",
	}
	ECommand_value = map[string]int32{
		"SEND_MSG":                  0,
		"MSG_HEART_BEAT":            3,
		"ON_PLAYER_DISCONNECT":      1004,
		"ON_PLAYER_CONNECT":         1005,
		"ON_PLAYER_WAIT_QUEUE_INFO": 1006,
		"ON_PLAYER_RECEIVE_REPLY":   1007,
		"ON_PLAYER_WAIT_QUEUE_LEN":  1008,
		"ON_SERVICE_DISCONNECT":     3002,
		"ON_SERVICE_CONNECT":        3003,
		"ON_SERVICE_HANG_UP_LIST":   3004,
		"CALL_PLAYER_MSG":           2001,
		"CALL_SERVICE_MSG":          2002,
		"CALL_PLAYER_LOGOUT":        2003,
		"CALL_SERVICE_LOGOUT":       2004,
		"CALL_SERVICE_REPLY":        2005,
		"CALL_PLAYER_CHAT_LOG":      2006,
		"MSG_TEST":                  100001,
	}
)

func (x ECommand) Enum() *ECommand {
	p := new(ECommand)
	*p = x
	return p
}

func (x ECommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECommand) Descriptor() protoreflect.EnumDescriptor {
	return file_commands_proto_enumTypes[0].Descriptor()
}

func (ECommand) Type() protoreflect.EnumType {
	return &file_commands_proto_enumTypes[0]
}

func (x ECommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECommand.Descriptor instead.
func (ECommand) EnumDescriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{0}
}

// 错误枚举
type ErrorReason int32

const (
	ErrorReason_ERROR_DUMMY                ErrorReason = 0
	ErrorReason_PLAYER_HEART_BEAT_FAILED   ErrorReason = 1000 // 玩家心跳失败
	ErrorReason_PLAYER_REPEAT_LOGIN        ErrorReason = 1001 // 玩家重复登录
	ErrorReason_PLAYER_WAIT_QUEUE_OVERTIME ErrorReason = 1002 // 玩家等待队列超时
	ErrorReason_PLAYER_TALK_INTERVAL_LIMIT ErrorReason = 1003 // 玩家发言时间超时
	ErrorReason_PLAYER_CALL_LOGOUT         ErrorReason = 1004 // 玩家主动登出
	ErrorReason_SERVICE_REPEAT_LOGIN       ErrorReason = 2001 // 客服重复登录
	ErrorReason_SERVICE_CALL_LOGOUT        ErrorReason = 2002 // 客服主动登出
	ErrorReason_SERVICE_HEART_BEAT_FAILED  ErrorReason = 2003 // 客服心跳超时
)

// Enum value maps for ErrorReason.
var (
	ErrorReason_name = map[int32]string{
		0:    "ERROR_DUMMY",
		1000: "PLAYER_HEART_BEAT_FAILED",
		1001: "PLAYER_REPEAT_LOGIN",
		1002: "PLAYER_WAIT_QUEUE_OVERTIME",
		1003: "PLAYER_TALK_INTERVAL_LIMIT",
		1004: "PLAYER_CALL_LOGOUT",
		2001: "SERVICE_REPEAT_LOGIN",
		2002: "SERVICE_CALL_LOGOUT",
		2003: "SERVICE_HEART_BEAT_FAILED",
	}
	ErrorReason_value = map[string]int32{
		"ERROR_DUMMY":                0,
		"PLAYER_HEART_BEAT_FAILED":   1000,
		"PLAYER_REPEAT_LOGIN":        1001,
		"PLAYER_WAIT_QUEUE_OVERTIME": 1002,
		"PLAYER_TALK_INTERVAL_LIMIT": 1003,
		"PLAYER_CALL_LOGOUT":         1004,
		"SERVICE_REPEAT_LOGIN":       2001,
		"SERVICE_CALL_LOGOUT":        2002,
		"SERVICE_HEART_BEAT_FAILED":  2003,
	}
)

func (x ErrorReason) Enum() *ErrorReason {
	p := new(ErrorReason)
	*p = x
	return p
}

func (x ErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_commands_proto_enumTypes[1].Descriptor()
}

func (ErrorReason) Type() protoreflect.EnumType {
	return &file_commands_proto_enumTypes[1]
}

func (x ErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorReason.Descriptor instead.
func (ErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{1}
}

// 内网调试debug命令
type EDebugCmd int32

const (
	//
	//修改队列等待时间(s)：
	//cmd_str: WaitConnServiceLimit
	//cmd_val: 30
	//修改长时间聊天未发言时限(s)：
	//cmd_str:LastTalkIntervalLimit
	//cmd_val:60
	//
	//消息example：
	//msg.cmd_type: ECommand.MSG_TEST
	//msg.cmd_val: EDebugCmd.MODIFY_CONFIG
	//msg.cmd_str: "{\"WaitConnServiceLimit\": 3600}"
	EDebugCmd_MODIFY_CONFIG EDebugCmd = 0 // 修改配置
	EDebugCmd_SERVICE_REPLY EDebugCmd = 1 // 客服连接
	EDebugCmd_GET_CHAT_LOG  EDebugCmd = 2 // 获取聊天log cmd_str：客服id
)

// Enum value maps for EDebugCmd.
var (
	EDebugCmd_name = map[int32]string{
		0: "MODIFY_CONFIG",
		1: "SERVICE_REPLY",
		2: "GET_CHAT_LOG",
	}
	EDebugCmd_value = map[string]int32{
		"MODIFY_CONFIG": 0,
		"SERVICE_REPLY": 1,
		"GET_CHAT_LOG":  2,
	}
)

func (x EDebugCmd) Enum() *EDebugCmd {
	p := new(EDebugCmd)
	*p = x
	return p
}

func (x EDebugCmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDebugCmd) Descriptor() protoreflect.EnumDescriptor {
	return file_commands_proto_enumTypes[2].Descriptor()
}

func (EDebugCmd) Type() protoreflect.EnumType {
	return &file_commands_proto_enumTypes[2]
}

func (x EDebugCmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDebugCmd.Descriptor instead.
func (EDebugCmd) EnumDescriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{2}
}

// error
type EErrorCode int32

const (
	EErrorCode_ERR_DUMMY            EErrorCode = 0
	EErrorCode_ERR_HANDLER_CALL_ERR EErrorCode = 1   // 请求调用失败
	EErrorCode_ERR_REQUEST_LIMIT    EErrorCode = 101 // 请求过于频繁
	EErrorCode_ERR_PLAYER_CONN_ERR  EErrorCode = 102 // 玩家连接失败
	EErrorCode_ERR_PARAM_ERROR      EErrorCode = 103 // 参数错误
	EErrorCode_ERR_SERVICE_CONN_ERR EErrorCode = 104 // 客服连接失败
)

// Enum value maps for EErrorCode.
var (
	EErrorCode_name = map[int32]string{
		0:   "ERR_DUMMY",
		1:   "ERR_HANDLER_CALL_ERR",
		101: "ERR_REQUEST_LIMIT",
		102: "ERR_PLAYER_CONN_ERR",
		103: "ERR_PARAM_ERROR",
		104: "ERR_SERVICE_CONN_ERR",
	}
	EErrorCode_value = map[string]int32{
		"ERR_DUMMY":            0,
		"ERR_HANDLER_CALL_ERR": 1,
		"ERR_REQUEST_LIMIT":    101,
		"ERR_PLAYER_CONN_ERR":  102,
		"ERR_PARAM_ERROR":      103,
		"ERR_SERVICE_CONN_ERR": 104,
	}
)

func (x EErrorCode) Enum() *EErrorCode {
	p := new(EErrorCode)
	*p = x
	return p
}

func (x EErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_commands_proto_enumTypes[3].Descriptor()
}

func (EErrorCode) Type() protoreflect.EnumType {
	return &file_commands_proto_enumTypes[3]
}

func (x EErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EErrorCode.Descriptor instead.
func (EErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{3}
}

var File_commands_proto protoreflect.FileDescriptor

var file_commands_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x70, 0x62, 0x2a, 0xb3, 0x03, 0x0a, 0x08, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41,
	0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0xec, 0x07, 0x12, 0x16,
	0x0a, 0x11, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x10, 0xed, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0xee, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x10, 0xef, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4c, 0x45, 0x4e,
	0x10, 0xf0, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0xba, 0x17, 0x12,
	0x17, 0x0a, 0x12, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0xbb, 0x17, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0xbc, 0x17, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xd1, 0x0f, 0x12, 0x15, 0x0a, 0x10,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x53, 0x47,
	0x10, 0xd2, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0xd3, 0x0f, 0x12, 0x18, 0x0a, 0x13,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x47,
	0x4f, 0x55, 0x54, 0x10, 0xd4, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xd5, 0x0f, 0x12,
	0x19, 0x0a, 0x14, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xd6, 0x0f, 0x12, 0x0e, 0x0a, 0x08, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0xa1, 0x8d, 0x06, 0x2a, 0x87, 0x02, 0x0a, 0x0b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x44, 0x55, 0x4d, 0x4d, 0x59, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x18, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xe8, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49,
	0x4e, 0x10, 0xe9, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0xea, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0xeb, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0xec, 0x07, 0x12,
	0x19, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xd1, 0x0f, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55,
	0x54, 0x10, 0xd2, 0x0f, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0xd3, 0x0f, 0x2a, 0x43, 0x0a, 0x09, 0x45, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6d,
	0x64, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x02, 0x2a, 0x94, 0x01, 0x0a, 0x0a, 0x45, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x52, 0x52, 0x5f,
	0x44, 0x55, 0x4d, 0x4d, 0x59, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x48,
	0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x66, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x67, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x68,
	0x42, 0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commands_proto_rawDescOnce sync.Once
	file_commands_proto_rawDescData = file_commands_proto_rawDesc
)

func file_commands_proto_rawDescGZIP() []byte {
	file_commands_proto_rawDescOnce.Do(func() {
		file_commands_proto_rawDescData = protoimpl.X.CompressGZIP(file_commands_proto_rawDescData)
	})
	return file_commands_proto_rawDescData
}

var file_commands_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_commands_proto_goTypes = []interface{}{
	(ECommand)(0),    // 0: pb.ECommand
	(ErrorReason)(0), // 1: pb.ErrorReason
	(EDebugCmd)(0),   // 2: pb.EDebugCmd
	(EErrorCode)(0),  // 3: pb.EErrorCode
}
var file_commands_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_commands_proto_init() }
func file_commands_proto_init() {
	if File_commands_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commands_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commands_proto_goTypes,
		DependencyIndexes: file_commands_proto_depIdxs,
		EnumInfos:         file_commands_proto_enumTypes,
	}.Build()
	File_commands_proto = out.File
	file_commands_proto_rawDesc = nil
	file_commands_proto_goTypes = nil
	file_commands_proto_depIdxs = nil
}
