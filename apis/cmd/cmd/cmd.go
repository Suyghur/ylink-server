// Code generated by goctl. DO NOT EDIT!
// Source: cmd.proto

package cmd

import (
	"context"

	"ylink/apis/cmd/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CmdResp                   = pb.CmdResp
	CsConnectPlayerReq        = pb.CsConnectPlayerReq
	CsConnectPlayerResp       = pb.CsConnectPlayerResp
	CsFetchHistoryChatReq     = pb.CsFetchHistoryChatReq
	CsFetchHistoryChatResp    = pb.CsFetchHistoryChatResp
	CsFetchHistoryMsgReq      = pb.CsFetchHistoryMsgReq
	CsFetchHistoryMsgResp     = pb.CsFetchHistoryMsgResp
	CsFetchMsgReq             = pb.CsFetchMsgReq
	CsFetchMsgResp            = pb.CsFetchMsgResp
	CsFetchPlayerQueueReq     = pb.CsFetchPlayerQueueReq
	CsFetchPlayerQueueResp    = pb.CsFetchPlayerQueueResp
	CsSendMsgReq              = pb.CsSendMsgReq
	CsSendMsgResp             = pb.CsSendMsgResp
	PlayerDisconnectReq       = pb.PlayerDisconnectReq
	PlayerDisconnectResp      = pb.PlayerDisconnectResp
	PlayerFetchCsInfoReq      = pb.PlayerFetchCsInfoReq
	PlayerFetchCsInfoResp     = pb.PlayerFetchCsInfoResp
	PlayerFetchHistoryMsgReq  = pb.PlayerFetchHistoryMsgReq
	PlayerFetchHistoryMsgResp = pb.PlayerFetchHistoryMsgResp
	PlayerFetchMsgReq         = pb.PlayerFetchMsgReq
	PlayerFetchMsgResp        = pb.PlayerFetchMsgResp
	PlayerSendMsgReq          = pb.PlayerSendMsgReq
	PlayerSendMsgResp         = pb.PlayerSendMsgResp

	Cmd interface {
		PlayerFetchCsInfo(ctx context.Context, in *PlayerFetchCsInfoReq, opts ...grpc.CallOption) (*PlayerFetchCsInfoResp, error)
		PlayerFetchHistoryMsg(ctx context.Context, in *PlayerFetchHistoryMsgReq, opts ...grpc.CallOption) (*PlayerFetchHistoryMsgResp, error)
		PlayerFetchMsg(ctx context.Context, in *PlayerFetchMsgReq, opts ...grpc.CallOption) (*PlayerFetchMsgResp, error)
		PlayerSendMsg(ctx context.Context, in *PlayerSendMsgReq, opts ...grpc.CallOption) (*PlayerSendMsgResp, error)
		PlayerDisconnect(ctx context.Context, in *PlayerDisconnectReq, opts ...grpc.CallOption) (*PlayerDisconnectResp, error)
		CsFetchPlayerQueue(ctx context.Context, in *CsFetchPlayerQueueReq, opts ...grpc.CallOption) (*CsFetchPlayerQueueResp, error)
		CsConnectPlayer(ctx context.Context, in *CsConnectPlayerReq, opts ...grpc.CallOption) (*CsConnectPlayerResp, error)
		CsFetchHistoryChat(ctx context.Context, in *CsFetchHistoryChatReq, opts ...grpc.CallOption) (*CsFetchHistoryChatResp, error)
		CsFetchHistoryMsg(ctx context.Context, in *CsFetchHistoryMsgReq, opts ...grpc.CallOption) (*CsFetchHistoryMsgResp, error)
		CsFetchMsg(ctx context.Context, in *CsFetchMsgReq, opts ...grpc.CallOption) (*CsFetchMsgResp, error)
		CsSendMsg(ctx context.Context, in *CsSendMsgReq, opts ...grpc.CallOption) (*CsSendMsgResp, error)
	}

	defaultCmd struct {
		cli zrpc.Client
	}
)

func NewCmd(cli zrpc.Client) Cmd {
	return &defaultCmd{
		cli: cli,
	}
}

func (m *defaultCmd) PlayerFetchCsInfo(ctx context.Context, in *PlayerFetchCsInfoReq, opts ...grpc.CallOption) (*PlayerFetchCsInfoResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.PlayerFetchCsInfo(ctx, in, opts...)
}

func (m *defaultCmd) PlayerFetchHistoryMsg(ctx context.Context, in *PlayerFetchHistoryMsgReq, opts ...grpc.CallOption) (*PlayerFetchHistoryMsgResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.PlayerFetchHistoryMsg(ctx, in, opts...)
}

func (m *defaultCmd) PlayerFetchMsg(ctx context.Context, in *PlayerFetchMsgReq, opts ...grpc.CallOption) (*PlayerFetchMsgResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.PlayerFetchMsg(ctx, in, opts...)
}

func (m *defaultCmd) PlayerSendMsg(ctx context.Context, in *PlayerSendMsgReq, opts ...grpc.CallOption) (*PlayerSendMsgResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.PlayerSendMsg(ctx, in, opts...)
}

func (m *defaultCmd) PlayerDisconnect(ctx context.Context, in *PlayerDisconnectReq, opts ...grpc.CallOption) (*PlayerDisconnectResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.PlayerDisconnect(ctx, in, opts...)
}

func (m *defaultCmd) CsFetchPlayerQueue(ctx context.Context, in *CsFetchPlayerQueueReq, opts ...grpc.CallOption) (*CsFetchPlayerQueueResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.CsFetchPlayerQueue(ctx, in, opts...)
}

func (m *defaultCmd) CsConnectPlayer(ctx context.Context, in *CsConnectPlayerReq, opts ...grpc.CallOption) (*CsConnectPlayerResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.CsConnectPlayer(ctx, in, opts...)
}

func (m *defaultCmd) CsFetchHistoryChat(ctx context.Context, in *CsFetchHistoryChatReq, opts ...grpc.CallOption) (*CsFetchHistoryChatResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.CsFetchHistoryChat(ctx, in, opts...)
}

func (m *defaultCmd) CsFetchHistoryMsg(ctx context.Context, in *CsFetchHistoryMsgReq, opts ...grpc.CallOption) (*CsFetchHistoryMsgResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.CsFetchHistoryMsg(ctx, in, opts...)
}

func (m *defaultCmd) CsFetchMsg(ctx context.Context, in *CsFetchMsgReq, opts ...grpc.CallOption) (*CsFetchMsgResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.CsFetchMsg(ctx, in, opts...)
}

func (m *defaultCmd) CsSendMsg(ctx context.Context, in *CsSendMsgReq, opts ...grpc.CallOption) (*CsSendMsgResp, error) {
	client := pb.NewCmdClient(m.cli.Conn())
	return client.CsSendMsg(ctx, in, opts...)
}
