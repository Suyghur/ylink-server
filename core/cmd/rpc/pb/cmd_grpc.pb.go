// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/cmd.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmdClient is the client API for Cmd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmdClient interface {
	PlayerFetchCsInfo(ctx context.Context, in *PlayerFetchCsInfoReq, opts ...grpc.CallOption) (*PlayerFetchCsInfoResp, error)
	PlayerFetchHistoryMsg(ctx context.Context, in *PlayerFetchHistoryMsgReq, opts ...grpc.CallOption) (*PlayerFetchHistoryMsgResp, error)
	PlayerFetchMsg(ctx context.Context, in *PlayerFetchMsgReq, opts ...grpc.CallOption) (*PlayerFetchMsgResp, error)
	PlayerSendMsg(ctx context.Context, in *PlayerSendMsgReq, opts ...grpc.CallOption) (*PlayerSendMsgResp, error)
	PlayerDisconnect(ctx context.Context, in *PlayerDisconnectReq, opts ...grpc.CallOption) (*PlayerDisconnectResp, error)
	CsFetchPlayerQueue(ctx context.Context, in *CsFetchPlayerQueueReq, opts ...grpc.CallOption) (*CsFetchPlayerQueueResp, error)
	CsConnectPlayer(ctx context.Context, in *CsConnectPlayerReq, opts ...grpc.CallOption) (*CsConnectPlayerResp, error)
	CsFetchHistoryChat(ctx context.Context, in *CsFetchHistoryChatReq, opts ...grpc.CallOption) (*CsFetchHistoryChatResp, error)
	CsFetchHistoryMsg(ctx context.Context, in *CsFetchHistoryMsgReq, opts ...grpc.CallOption) (*CsFetchHistoryMsgResp, error)
	CsFetchMsg(ctx context.Context, in *CsFetchMsgReq, opts ...grpc.CallOption) (*CsFetchMsgResp, error)
	CsSendMsg(ctx context.Context, in *CsSendMsgReq, opts ...grpc.CallOption) (*CsSendMsgResp, error)
}

type cmdClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdClient(cc grpc.ClientConnInterface) CmdClient {
	return &cmdClient{cc}
}

func (c *cmdClient) PlayerFetchCsInfo(ctx context.Context, in *PlayerFetchCsInfoReq, opts ...grpc.CallOption) (*PlayerFetchCsInfoResp, error) {
	out := new(PlayerFetchCsInfoResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/playerFetchCsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) PlayerFetchHistoryMsg(ctx context.Context, in *PlayerFetchHistoryMsgReq, opts ...grpc.CallOption) (*PlayerFetchHistoryMsgResp, error) {
	out := new(PlayerFetchHistoryMsgResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/playerFetchHistoryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) PlayerFetchMsg(ctx context.Context, in *PlayerFetchMsgReq, opts ...grpc.CallOption) (*PlayerFetchMsgResp, error) {
	out := new(PlayerFetchMsgResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/playerFetchMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) PlayerSendMsg(ctx context.Context, in *PlayerSendMsgReq, opts ...grpc.CallOption) (*PlayerSendMsgResp, error) {
	out := new(PlayerSendMsgResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/playerSendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) PlayerDisconnect(ctx context.Context, in *PlayerDisconnectReq, opts ...grpc.CallOption) (*PlayerDisconnectResp, error) {
	out := new(PlayerDisconnectResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/playerDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) CsFetchPlayerQueue(ctx context.Context, in *CsFetchPlayerQueueReq, opts ...grpc.CallOption) (*CsFetchPlayerQueueResp, error) {
	out := new(CsFetchPlayerQueueResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/csFetchPlayerQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) CsConnectPlayer(ctx context.Context, in *CsConnectPlayerReq, opts ...grpc.CallOption) (*CsConnectPlayerResp, error) {
	out := new(CsConnectPlayerResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/csConnectPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) CsFetchHistoryChat(ctx context.Context, in *CsFetchHistoryChatReq, opts ...grpc.CallOption) (*CsFetchHistoryChatResp, error) {
	out := new(CsFetchHistoryChatResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/csFetchHistoryChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) CsFetchHistoryMsg(ctx context.Context, in *CsFetchHistoryMsgReq, opts ...grpc.CallOption) (*CsFetchHistoryMsgResp, error) {
	out := new(CsFetchHistoryMsgResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/csFetchHistoryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) CsFetchMsg(ctx context.Context, in *CsFetchMsgReq, opts ...grpc.CallOption) (*CsFetchMsgResp, error) {
	out := new(CsFetchMsgResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/csFetchMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) CsSendMsg(ctx context.Context, in *CsSendMsgReq, opts ...grpc.CallOption) (*CsSendMsgResp, error) {
	out := new(CsSendMsgResp)
	err := c.cc.Invoke(ctx, "/pb.Cmd/csSendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmdServer is the server API for Cmd service.
// All implementations must embed UnimplementedCmdServer
// for forward compatibility
type CmdServer interface {
	PlayerFetchCsInfo(context.Context, *PlayerFetchCsInfoReq) (*PlayerFetchCsInfoResp, error)
	PlayerFetchHistoryMsg(context.Context, *PlayerFetchHistoryMsgReq) (*PlayerFetchHistoryMsgResp, error)
	PlayerFetchMsg(context.Context, *PlayerFetchMsgReq) (*PlayerFetchMsgResp, error)
	PlayerSendMsg(context.Context, *PlayerSendMsgReq) (*PlayerSendMsgResp, error)
	PlayerDisconnect(context.Context, *PlayerDisconnectReq) (*PlayerDisconnectResp, error)
	CsFetchPlayerQueue(context.Context, *CsFetchPlayerQueueReq) (*CsFetchPlayerQueueResp, error)
	CsConnectPlayer(context.Context, *CsConnectPlayerReq) (*CsConnectPlayerResp, error)
	CsFetchHistoryChat(context.Context, *CsFetchHistoryChatReq) (*CsFetchHistoryChatResp, error)
	CsFetchHistoryMsg(context.Context, *CsFetchHistoryMsgReq) (*CsFetchHistoryMsgResp, error)
	CsFetchMsg(context.Context, *CsFetchMsgReq) (*CsFetchMsgResp, error)
	CsSendMsg(context.Context, *CsSendMsgReq) (*CsSendMsgResp, error)
	mustEmbedUnimplementedCmdServer()
}

// UnimplementedCmdServer must be embedded to have forward compatible implementations.
type UnimplementedCmdServer struct {
}

func (UnimplementedCmdServer) PlayerFetchCsInfo(context.Context, *PlayerFetchCsInfoReq) (*PlayerFetchCsInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerFetchCsInfo not implemented")
}
func (UnimplementedCmdServer) PlayerFetchHistoryMsg(context.Context, *PlayerFetchHistoryMsgReq) (*PlayerFetchHistoryMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerFetchHistoryMsg not implemented")
}
func (UnimplementedCmdServer) PlayerFetchMsg(context.Context, *PlayerFetchMsgReq) (*PlayerFetchMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerFetchMsg not implemented")
}
func (UnimplementedCmdServer) PlayerSendMsg(context.Context, *PlayerSendMsgReq) (*PlayerSendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerSendMsg not implemented")
}
func (UnimplementedCmdServer) PlayerDisconnect(context.Context, *PlayerDisconnectReq) (*PlayerDisconnectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerDisconnect not implemented")
}
func (UnimplementedCmdServer) CsFetchPlayerQueue(context.Context, *CsFetchPlayerQueueReq) (*CsFetchPlayerQueueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CsFetchPlayerQueue not implemented")
}
func (UnimplementedCmdServer) CsConnectPlayer(context.Context, *CsConnectPlayerReq) (*CsConnectPlayerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CsConnectPlayer not implemented")
}
func (UnimplementedCmdServer) CsFetchHistoryChat(context.Context, *CsFetchHistoryChatReq) (*CsFetchHistoryChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CsFetchHistoryChat not implemented")
}
func (UnimplementedCmdServer) CsFetchHistoryMsg(context.Context, *CsFetchHistoryMsgReq) (*CsFetchHistoryMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CsFetchHistoryMsg not implemented")
}
func (UnimplementedCmdServer) CsFetchMsg(context.Context, *CsFetchMsgReq) (*CsFetchMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CsFetchMsg not implemented")
}
func (UnimplementedCmdServer) CsSendMsg(context.Context, *CsSendMsgReq) (*CsSendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CsSendMsg not implemented")
}
func (UnimplementedCmdServer) mustEmbedUnimplementedCmdServer() {}

// UnsafeCmdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmdServer will
// result in compilation errors.
type UnsafeCmdServer interface {
	mustEmbedUnimplementedCmdServer()
}

func RegisterCmdServer(s grpc.ServiceRegistrar, srv CmdServer) {
	s.RegisterService(&Cmd_ServiceDesc, srv)
}

func _Cmd_PlayerFetchCsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerFetchCsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).PlayerFetchCsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/playerFetchCsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).PlayerFetchCsInfo(ctx, req.(*PlayerFetchCsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_PlayerFetchHistoryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerFetchHistoryMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).PlayerFetchHistoryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/playerFetchHistoryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).PlayerFetchHistoryMsg(ctx, req.(*PlayerFetchHistoryMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_PlayerFetchMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerFetchMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).PlayerFetchMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/playerFetchMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).PlayerFetchMsg(ctx, req.(*PlayerFetchMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_PlayerSendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerSendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).PlayerSendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/playerSendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).PlayerSendMsg(ctx, req.(*PlayerSendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_PlayerDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerDisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).PlayerDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/playerDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).PlayerDisconnect(ctx, req.(*PlayerDisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_CsFetchPlayerQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CsFetchPlayerQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).CsFetchPlayerQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/csFetchPlayerQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).CsFetchPlayerQueue(ctx, req.(*CsFetchPlayerQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_CsConnectPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CsConnectPlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).CsConnectPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/csConnectPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).CsConnectPlayer(ctx, req.(*CsConnectPlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_CsFetchHistoryChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CsFetchHistoryChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).CsFetchHistoryChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/csFetchHistoryChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).CsFetchHistoryChat(ctx, req.(*CsFetchHistoryChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_CsFetchHistoryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CsFetchHistoryMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).CsFetchHistoryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/csFetchHistoryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).CsFetchHistoryMsg(ctx, req.(*CsFetchHistoryMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_CsFetchMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CsFetchMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).CsFetchMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/csFetchMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).CsFetchMsg(ctx, req.(*CsFetchMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_CsSendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CsSendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).CsSendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cmd/csSendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).CsSendMsg(ctx, req.(*CsSendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cmd_ServiceDesc is the grpc.ServiceDesc for Cmd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cmd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Cmd",
	HandlerType: (*CmdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "playerFetchCsInfo",
			Handler:    _Cmd_PlayerFetchCsInfo_Handler,
		},
		{
			MethodName: "playerFetchHistoryMsg",
			Handler:    _Cmd_PlayerFetchHistoryMsg_Handler,
		},
		{
			MethodName: "playerFetchMsg",
			Handler:    _Cmd_PlayerFetchMsg_Handler,
		},
		{
			MethodName: "playerSendMsg",
			Handler:    _Cmd_PlayerSendMsg_Handler,
		},
		{
			MethodName: "playerDisconnect",
			Handler:    _Cmd_PlayerDisconnect_Handler,
		},
		{
			MethodName: "csFetchPlayerQueue",
			Handler:    _Cmd_CsFetchPlayerQueue_Handler,
		},
		{
			MethodName: "csConnectPlayer",
			Handler:    _Cmd_CsConnectPlayer_Handler,
		},
		{
			MethodName: "csFetchHistoryChat",
			Handler:    _Cmd_CsFetchHistoryChat_Handler,
		},
		{
			MethodName: "csFetchHistoryMsg",
			Handler:    _Cmd_CsFetchHistoryMsg_Handler,
		},
		{
			MethodName: "csFetchMsg",
			Handler:    _Cmd_CsFetchMsg_Handler,
		},
		{
			MethodName: "csSendMsg",
			Handler:    _Cmd_CsSendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/cmd.proto",
}
