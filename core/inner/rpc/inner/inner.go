// Code generated by goctl. DO NOT EDIT!
// Source: inner.proto

package inner

import (
	"context"

	"ylink/core/inner/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	InnerCsConnectPlayerReq     = pb.InnerCsConnectPlayerReq
	InnerCsConnectPlayerResp    = pb.InnerCsConnectPlayerResp
	InnerCsFetchPlayerQueueReq  = pb.InnerCsFetchPlayerQueueReq
	InnerCsFetchPlayerQueueResp = pb.InnerCsFetchPlayerQueueResp
	InnerPlayerDisconnectReq    = pb.InnerPlayerDisconnectReq
	InnerPlayerDisconnectResp   = pb.InnerPlayerDisconnectResp
	InnerPlayerFetchCsInfoReq   = pb.InnerPlayerFetchCsInfoReq
	InnerPlayerFetchCsInfoResp  = pb.InnerPlayerFetchCsInfoResp
	UpdateUserStatusReq         = pb.UpdateUserStatusReq
	UpdateUserStatusResp        = pb.UpdateUserStatusResp

	Inner interface {
		PlayerFetchCsInfo(ctx context.Context, in *InnerPlayerFetchCsInfoReq, opts ...grpc.CallOption) (*InnerPlayerFetchCsInfoResp, error)
		PlayerDisconnect(ctx context.Context, in *InnerPlayerDisconnectReq, opts ...grpc.CallOption) (*InnerPlayerDisconnectResp, error)
		CsFetchPlayerQueue(ctx context.Context, in *InnerCsFetchPlayerQueueReq, opts ...grpc.CallOption) (*InnerCsFetchPlayerQueueResp, error)
		CsConnectPlayer(ctx context.Context, in *InnerCsConnectPlayerReq, opts ...grpc.CallOption) (*InnerCsConnectPlayerResp, error)
		UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*UpdateUserStatusResp, error)
	}

	defaultInner struct {
		cli zrpc.Client
	}
)

func NewInner(cli zrpc.Client) Inner {
	return &defaultInner{
		cli: cli,
	}
}

func (m *defaultInner) PlayerFetchCsInfo(ctx context.Context, in *InnerPlayerFetchCsInfoReq, opts ...grpc.CallOption) (*InnerPlayerFetchCsInfoResp, error) {
	client := pb.NewInnerClient(m.cli.Conn())
	return client.PlayerFetchCsInfo(ctx, in, opts...)
}

func (m *defaultInner) PlayerDisconnect(ctx context.Context, in *InnerPlayerDisconnectReq, opts ...grpc.CallOption) (*InnerPlayerDisconnectResp, error) {
	client := pb.NewInnerClient(m.cli.Conn())
	return client.PlayerDisconnect(ctx, in, opts...)
}

func (m *defaultInner) CsFetchPlayerQueue(ctx context.Context, in *InnerCsFetchPlayerQueueReq, opts ...grpc.CallOption) (*InnerCsFetchPlayerQueueResp, error) {
	client := pb.NewInnerClient(m.cli.Conn())
	return client.CsFetchPlayerQueue(ctx, in, opts...)
}

func (m *defaultInner) CsConnectPlayer(ctx context.Context, in *InnerCsConnectPlayerReq, opts ...grpc.CallOption) (*InnerCsConnectPlayerResp, error) {
	client := pb.NewInnerClient(m.cli.Conn())
	return client.CsConnectPlayer(ctx, in, opts...)
}

func (m *defaultInner) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*UpdateUserStatusResp, error) {
	client := pb.NewInnerClient(m.cli.Conn())
	return client.UpdateUserStatus(ctx, in, opts...)
}
